
consider making override option for drawsocket.send
so it could be cleaner to switch between browser and electron
(overriding to ipcRenderer.send)

# short term to do
- update from gui doens't work with stave because the getObjViewContext function doesn't go all the way to the svg elment,
    however, this also makes me wonder if maybe staves shouldn't be redrawn based on the info ... 
        but that's not right, of course it should, for example, you might have a 5 line staff and want to change the clef, 
            that could be an attribute of the 5 line stave


- add expression composition interface



print to pdf https://stackoverflow.com/questions/43015044/electron-printtopdf-from-browserwindow



user scripts

on new object click
    symbolistEvent creates new data object and generates view from data

    sequece could be:
    - UI event, sends new click notice and class name to controller
        controller creates data from symbol def, data creates view
        - then def calls custom UI to edit the object
            do we have a data from view?
                newFromClick, mappings, transform do this
                better to make a function for that?
    or
    - UI event, 

on palette selection:
1) enters create symbol UI, sets limits and range of possible creation,
    for example, quantized to scale degrees etc.

on selection:
1) enter symbol UI, which sets possible types of transformation (translation mode)

after selection
1) possibility to go into edit mode, similar to creation mode


so for general selection, we can keep the drag area rect
in illustrator there are different tools that can perform the same types of actions on the objects
in symbolist right now you need to hold down the cmd key which is like selecting the symbol palette icon to create the symbol, rather than selecting -- maybe this is still an interesting why to go...

sine we may sill want to create symbols by drawing rather than importing them.

TO DO:
revise symbols to use modes to customize the UI

translation should not necesarily be a built in edit UI, for example maybe translation means somethind different in different contexts. the idea from before was that the stave would define a concept of organization of it's symbols, be it in time, or some other aspect, like space



key thing to remember: view and model use the same ids, so the "data_context" will have the same id as the "view_context"
therefore, a graphic object can be interpreted into data via mapping (in the controller still probably) and use the view_context as the parent
newFromClick will still get used

- set stave as context
- icons appear
- select icon
- ghost position preview appears limited by stave -- but calcuated in the symbol? how does the symbol know about the parent context?


previously i was trying to stick with the MVC pattern, and work with the idea that the view objects would be really updated by the def, since it might override the view update -- and i stil think that is interesting, but now since we will have scripts read by the view as well, i think it makes more sense to have the view apply the transform (which it is already doing? is that a dummy object?) and then the def can update the model from the upated view object, and will still have the opiton to limit or change the data based on that , so the view should still be updated after the data is updated.


page.staves = [ staveid, staveid, ... ]

stave.events = [ eventid, eventid, ... ]


a difference between the drawsocket and symbolist_renderer format of objects is that drawsocket uses the 'new' tag 
maybe we should change that? maybe not... new makes drawsocket remove the old object and overwrite a new one in its place.

symbolist_renderer sends back a "type" tag instead of new... 



now mapping is all in browser, to from data graphics
then sending out changes, and additions, which can go to the lookup system

would be cool for thursday to :
create meta process that creates other data (like tempo curver or clustering)
ceate symbol with rotating line for azimuth



top level element is identified by the class "symbol" and all dataset information should be in this object