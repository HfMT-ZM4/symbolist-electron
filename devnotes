
consider making override option for drawsocket.send
so it could be cleaner to switch between browser and electron
(overriding to ipcRenderer.send)

# short term to do
- update from gui doens't work with stave because the getObjViewContext function doesn't go all the way to the svg elment,
    however, this also makes me wonder if maybe staves shouldn't be redrawn based on the info ... 
        but that's not right, of course it should, for example, you might have a 5 line staff and want to change the clef, 
            that could be an attribute of the 5 line stave


- add expression composition interface



print to pdf https://stackoverflow.com/questions/43015044/electron-printtopdf-from-browserwindow



user scripts

on new object click
    symbolistEvent creates new data object and generates view from data

    sequece could be:
    - UI event, sends new click notice and class name to controller
        controller creates data from symbol def, data creates view
        - then def calls custom UI to edit the object
            do we have a data from view?
                newFromClick, mappings, transform do this
                better to make a function for that?
    or
    - UI event, 

on palette selection:
1) enters create symbol UI, sets limits and range of possible creation,
    for example, quantized to scale degrees etc.

on selection:
1) enter symbol UI, which sets possible types of transformation (translation mode)

after selection
1) possibility to go into edit mode, similar to creation mode


so for general selection, we can keep the drag area rect
in illustrator there are different tools that can perform the same types of actions on the objects
in symbolist right now you need to hold down the cmd key which is like selecting the symbol palette icon to create the symbol, rather than selecting -- maybe this is still an interesting why to go...

sine we may sill want to create symbols by drawing rather than importing them.

TO DO:
revise symbols to use modes to customize the UI

translation should not necesarily be a built in edit UI, for example maybe translation means somethind different in different contexts. the idea from before was that the stave would define a concept of organization of it's symbols, be it in time, or some other aspect, like space



key thing to remember: view and model use the same ids, so the "data_context" will have the same id as the "view_context"
therefore, a graphic object can be interpreted into data via mapping (in the controller still probably) and use the view_context as the parent
newFromClick will still get used

- set stave as context
- icons appear
- select icon
- ghost position preview appears limited by stave -- but calcuated in the symbol? how does the symbol know about the parent context?


previously i was trying to stick with the MVC pattern, and work with the idea that the view objects would be really updated by the def, since it might override the view update -- and i stil think that is interesting, but now since we will have scripts read by the view as well, i think it makes more sense to have the view apply the transform (which it is already doing? is that a dummy object?) and then the def can update the model from the upated view object, and will still have the opiton to limit or change the data based on that , so the view should still be updated after the data is updated.


page.staves = [ staveid, staveid, ... ]

stave.events = [ eventid, eventid, ... ]


a difference between the drawsocket and symbolist_renderer format of objects is that drawsocket uses the 'new' tag 
maybe we should change that? maybe not... new makes drawsocket remove the old object and overwrite a new one in its place.

symbolist_renderer sends back a "type" tag instead of new... 



now mapping is all in browser, to from data graphics
then sending out changes, and additions, which can go to the lookup system

would be cool for thursday to :
create meta process that creates other data (like tempo curver or clustering)
ceate symbol with rotating line for azimuth


top level element is identified by the class "symbol" and all dataset information should be in this object
best is if all symbols are wrapped in <g> tags, so that GUI elements can be contained inside of them

/**
 * view container model (stave/page/etc)
 * 
 * svg:
 * <g class='className symbol container' data-time="0.1" data-duration="1" >
 *      <g class='className display'></g>
 *      <g class='className contents'></g>
 * </g>
 * 
 * html:
 * <div class='className symbol container'>
 *      <div class='className display'></div>
 *      <div class='className contents'></div>
 * </div>
 * 
 * regular objects can be any node type
 * usually they will be in a container
 * 
 * <g class"className symbol" data-time="0.1" data-duration="1">
 *     <circle .... />
 * </g>
 * 
 * 
 * sent to browser using drawsocket format
 * 
 */


 for rotation, rectangles are special becuase they are defined by width and height, which means that we can't apply the rotation matrix to the object parameters, but need to use a transform, that means that the mapping has to use the transform also, which in turn means that the preview translation before we apply the values to the real object needs to be handled slightly differently. 

 the basic idea is that you apply the translation to the top group and then update the object values on mouse up, or cancel if you press escape

- work on reducing the amount that the renderer is doing
- clean up symbolist_event code (remove all of it?)
- rename controllers?
    "ui handler" ?
        ui mapping scripts
    "lookup handler" ?
        lookup scripts (could also map)

 - separate lookup scripts
 - create proof of concept for lookup scripts

 - proof of concept for score symbols
    - frame notation as before 
    - point with arrows pointing to direction, 
        could also be several points/directions, using mc.granubuf style encoding the postion with the grains
    - work on granular synth notation
    - later modular synth notation
        modular synth seems more complicated maybe

    - alternative types of scores, like what?
    - evolving score, that is defined by a weighted map
        the map produces data objects, which are then notated

    - data visualisation, using max or other process to create data, could be sensors also
        how many points can the system handle?

- need scrolling to work
    done -- mostly
    
- for now  we can just use a single stave?
    or create page object that groups container staves, and usually acts to show the synchronization between them

- add init ping from browser (or in did-load) to send data from server side

for lookup 
// start at top level and descend through container/contents id lists
// will need to identify containers in the model
    maybe keep a separate array of container id's

// will also need the sorting mechanism
    for finding the right container if the user doesn't know or include an id when sending data in via UDP

symbols should define the sorting mechanism that sorts themselves, not their children (afaict)
better if each type defines the method for sorting that type




    /**
     * if there is a parent id already known we can speed this up a bit and just lookup by id
     * without having to find which container instance is the right one
     * 
     * on the other hand, we don't always actually need to know the container instance,
     * e.g. in cases of continued staves in new systems. In these cases, it's even better
     * not to use the container info to lookup the event symbol info
     * 
     * but if the output is dependent on information in the container instance, then the id 
     * will be needed to lookup the value. 
     * 
     * So, what we can do here is check if the parent is an ID, and if it is, get the classType?
     * 
     * no: what ever the parent is will be the way that the system tries to find the symbol
     * so if the parent is an id, the system will lookup by id and get the value at the right time
     * based on the lookup script. 
     * 
     * 
     */


structure idea:
staves are one object, that visually separate chunks of time into segments to fit the formatting of a page. this is great for printing and reading, however is not directly part of the playback information of the score.

therefore the structure of the score is that there is one container (stave) for a given set of points.

in other types of scores, maybe there could be some kind of structural meaning for the segmentation of the events into separate blocks. in this case the container becomes a symbol (that may or may not be a container of other events)

what this means is that "staves" in the palette create a single structure that multiple events can exist inside. if staves allow you to make multiple instances, they are actaully connected, since they are container objects.

maybe both types of objects can be top level, and we don't need the separation of the stave and symbol in the pallette, but for now i'll try this approach


containers of containers:
    palette should keep expanding if the context gets set, rather than having fixed "stave" and "symbol" palettets.

    like modes, each esc should go back one level (or just jump to default context on esc)


container of container objects:

1) typical system, a retangular block, that can have muliple rectanges inside that are all the same width, the height can vary. inside each internal rectangle is an instrumental field, which can have it's own notation -- the container defines a structure to the symbols and the symbols are (must be?) defined within the context of these particular systems.

    within an instrumental line, there can be clef changes, which change the type of notations used
    so in a way these internal blocks are staves, with a given clef. the clef changes the possible notes that are used. so if the symbols can be resused with different clefs, the symbols need to get information about the clef (i.e. pitch range)
        this would be a good test, make some simple range clefs and switch them for playback.
    
    clefs are context symbols, and are constrained to a specific vertical position, but are slide-able in the time axis

    some clefs will also be connected to specific symbols, so they should still specify which symbols are supported in their sub-palette. So the clefs are like a layer between the main container form and the event form.  therefore, again the symbols are really part of the clef, like a plot key. but it could be that some clefs share the same symbols (like bass and treble clefs), just that in cases where multiple clefs might use the same symbols, the symbols need to lookup what the clef range is -- OR we need some kind of nested reference system.

    in the case of spatial trajectories etc, there can be some element that relates to the time organization of the top container block.

how should staves be inserted into system?
    one option would be to make a template in a json file, and just declare the container as having specific instances of the staves, like say: 
    { 
        id: systemTemplate,
        class: containerContainer,
        contents: [{
                id: flute,
                class: rectangleStave
            }, {
                id: ob,
                class: rectangleStave
            }, {
                id: cl,
                class: otherWeirdStave
            }]
    }

    system
        instrumental part -- stave/stafflines, could be multiple staves, like a piano etc.
            clef(s) -- sub definition in the stave
                events: notes, dynamics, other markings

2) laban notation style, reading veritcally upwards, but really similar to musical scores, since the rectangles are corresponding.

3) playhead based systems, a bit like Xannix
    radial loop, or spiral, with radar like 
    playhead with hit detection

    in these cases, time is not defined in a rectangle, but more freely

    could also be 3D, but SVG is mainly 2D

3a) bouncing ball kind of scores, like ryan ross smith?
    defining animations with paths, then playing back

4) interactive
    generaitve scores that refine themselves in realtime
        via clicking on things or via sensor input routed via udp server
            in the case of UDP input, the definitions could be in the server, but could also be displayed in the editor

5) tools
    for example, a note drawing tool like in scriptographer:
        click creates a note drag to extend duration, or other interface to add flags etc.
            could also provide tools for drawing that has no meaning
            these symbols would have no playback lookup script and so would be ignored.

( backup note to self: staves serve a *visual* function, in that their spatial placement is for reading on pages therefore they need to contain some visual information in their dataset )

maybe some objects can't be moved, like top level container?
right, in some cases we might want to define the score layout, this is what I do all the time anyway
with a set number of player parts, it could be in some cases, the layout of the score is more 
visual, so then maybe there would be no preset frame, but in most typical scores, 
you could easily one long stave with the orchestra layed out, and never actually move, transpose
that main system (but of course you can zoom/scroll).

hopefully the way the system is setup, it is still very possible to design other scenarios, but
I think this makes sense for a basic starter. and then it solves some other questions, like
how do you define multiple instances of the same type of container (like a player part), and only change
the name of the part 
    (ok, I guess the name can be a parameter, but then you'd need to look up that stave to add notes
    and the class type would be the same, even if you add a second layer in the classname, it's 
    basically the same thing as looking up by class name AND ID each time)
with regards to IDs if there is only one of each type of container, we can use the class name as the ID also

the ID system is really only for internal lookup hash, for the composer, id's seem hard to work with
unless you have a specific system, but then if you delete a note, does that mean all the notes have to be
updated?

the storage format makes the most sense in arrays, keeping track of the ordering, and then actually maybe the ID can be left out?
    maybe, but it's not so bad to require an id... but on the other hand it can easily be difficult to manage

in def file:



{
    "setup": { 
        "ensembleContainer" : "containerContainer",
        "contents": {
            "flute" : "rectangleStave",
            "oboe": "retangleStave"
        }
    }
}

or:


{
    "setup": { 
        "id" : "trio",
        "class" : "systemContainer",
        x: 100,
        y: 100,
        "contents" : [{
            "id" : "oboe",
            "class" : "rectangleStave",
            "contents" : []
        },
        {
            "id" : "bassoon",
            "class" : "rectangleStave",
            "contents" : []
        },
        {
            "id" : "synth",
            "class" : "rectangleStave",
            "contents" : []
        }]
    }
}

on load:

symbolist will load the top class type, and optionally create an instance of this type, since that is the document setup. maybe the setup should be called layout? IDK

or maybe it is ok if there is always some kind of canvas starter background layout, like in illustrator.

then the score can build on this starter structure.

note: I guess the params can just be in the main object, rather than wrapped in a params sub object

{
    "setup": { 
        "id" : "trio",
        "class" : "systemContainer",
        x: 100,
        y: 100,
        "contents" : [{
            "id" : "oboe",
            "class" : "rectangleStave",
            "contents" : [{
                id: "note-1",
                class: "weirdNote",
                pitch: "A4",
                duration: 1.5
            }]
        },
        {
            "id" : "bassoon",
            "class" : "rectangleStave",
            "contents" : []
        },
        {
            "id" : "synth",
            "class" : "rectangleStave",
            "contents" : []
        }]
    }
}

would be nice if containers could adjust to fit the contents (especially containerContainer types)
maybe one idea would be to use a CSS file also to set class display defaults on the fly?
    (ok now added)

ok, so let's say the top level is a system for example
what is the palette then?
the top level becomes the default context? 
    mabye but when you click outside the object, the background SVG picks up the clicks


/**
* to do: call parent container to get placement, the placement is dependent on 
* the number of staves, and this height
* 
* probably we could use CSS to do this automatically, but it's maybe better to
* do it in JS to keep it simpler
* 
* //container.children.length
* 
* 
* or another option here maybe is to make the parts and the system at the 
* same time in the same def, using a list of names to create the parts,
* that might be easier, because it's hard to figure which part you are in if they
* all come at different times, and then what if you get them out of order?
* how would you know what the top position should be?
* 
*/

with the new system, the init file becomes the basis for the score, so this is actually the "containers" object in the io_controller.

was considering adding a post child addition update call to container, but actually that's not good because sometimes the children use the parent info to calculate their info, which means the parents need to be done already.

but this will work if the parsing is not depth first, but in layers
    added updateAfterContents()

need to redo the lookup now with the new score format

lookups will be in a single container, so we can use an id for reference.
generally you should be able to do a sub-container look up as well, but in most cases
the top-level container will be the lookup target

lookup now working seems like

next issue is that the bbox of the stave isn't necessarily the start point for time
so the parent/child system needs to know what to do
in the case of the systemContainer I can add a x_time_start in the dataset
the bbox is taking into account the text labels etc.

ok now, we can use the id-rect of the part stave, this is easy enough, but for more complicated situations maybe later the bbox will be useful.

at first I added the an offset x_time_start like element, but then decided that it shouldn't be in the score data unless we really need it. I suppose that the layout parameters are important for the score... some combination of visual layout and content information is probably inevitable.




## Mapping in Symbols vs. Containers 
There are many different possible mappings, relationships and arrangements between containers and symbols, containers and other containers, between symbols and other symbols etc. In some cases, the container is a simple two dimensional outlining of a graphic plot, in the x and y axis, and the symbol placed in the graph may have a have higher number of parameters associated with it. In other cases, like a musical key signature, the container might have a higher degree of information than the symbol, just like a the key signature may have many sharps or flats, which are then inherited by the symbol.

Conceptually it makes sense that the container is can be like a clef that defines an interpretation, and therefore the mapping script definition of the container should dictate the interpretation of the symbol. One the other hand, the symbols that exist in a container could potentially represent many more dimensions than the container, for example in a standard key signature, noteheads may mean different things, or even create a second order of container or context within the larger container, for example gestural notation of breath, or bowing that exists in time, but only loosely connected to the key signature of the stave.

For the creation of `symbolist` definitions there are no rules! But there seems to be a slight affordance towards the placement of mapping logic for a given symbol in the symbol itself rather than the container, and on creation the symbol looks to the container for reference information, but performs its own mapping logic within the symbol script. These are just observations in case they might be useful.



--- cut the above from the readme for now


page layout is a type of container
how do manual tweaks work? for instance stretching the width of a measure
    this changes the time 2 pixel scaling (in the x axis)
    change scalar for measure overriding the default



maybe container objects should have a getPositionForChild(container_instance, child_params)
and return a coordinate x/y or box or whatever is needed to the child object

* should all objects be containers?
    that might make it easier to navigate?
    then you'd need to always get the `.display` group
    might make sense
    yes
    do

    so if everything can be a container, then everything has the same format. 
    in the score, the contents tag indicates that it has contents

svg symbol format can be udpdated to remove 'container' class
<g class='className symbol' data-time="0.1" data-duration="1" >
    <g class='className display'></g>
    <g class='className contents'></g>
</g>


* consider removing the instpector in favor of edit mode
    or nice to have both?

* add container type to drawsocket that is the same as parent?
    seems like a good idea, done

* make simpler mouse event handlers so users don't have to declare their own?
    maybe maybe not

>> 


to do:
make top level object also a symbol
this way the palettes can also be redefined, and we can remove some of that from the ui_controller?

or for the short term, make graphic only HTML "symbol" object which holds GUI elements, the system container could be a child of this element


note that then the system container would be an <svg> object first
is this the right way to do it?

either the base is html div with a svg element as the root, or the root is svg and html objects can be inserted via foreignObject

or alternatively things like the text object could be svg objects 


-- add updateAfterContents for all fromData calls
    also in the template?

-- add callback when symbol is selected as context
    now added


selection in context should probably only select top level objects?
maybe single click should select full object and double click enters that group
and selects the subcomponent?